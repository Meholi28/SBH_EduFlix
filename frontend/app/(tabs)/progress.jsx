import { View, Text, ScrollView, TouchableOpacity, StyleSheet, Dimensions, Modal, ActivityIndicator } from 'react-native'
import React, { useState } from 'react'
import { Ionicons } from '@expo/vector-icons'
import { LineChart, PieChart } from 'react-native-chart-kit'

const Progress = () => {
  const [isLoading, setIsLoading] = useState(false)
  const [showNotes, setShowNotes] = useState(false)
  const [currentSubject, setCurrentSubject] = useState(null)
  const [aiNotes, setAiNotes] = useState('')

  // Mock data - replace with actual data from backend
  const userData = {
    name: "John Doe",
    domain: "Class 10 Student"
  }

  const examAttempts = [
    { id: 1, examName: "Mathematics Final", score: 85, date: "2024-03-15" },
    { id: 2, examName: "Science Midterm", score: 78, date: "2024-03-10" },
    { id: 3, examName: "English Quiz", score: 92, date: "2024-03-05" },
  ]

  // Mock AI Analysis data
  const aiAnalysis = {
    performanceTrend: {
      labels: ["Jan", "Feb", "Mar"],
      datasets: [{
        data: [75, 82, 85]
      }]
    },
    subjectBreakdown: [
      { name: "Mathematics", score: 85, color: "#E50914", legendFontColor: "#fff" },
      { name: "Science", score: 78, color: "#FF6B6B", legendFontColor: "#fff" },
      { name: "English", score: 92, color: "#4CAF50", legendFontColor: "#fff" },
      { name: "History", score: 65, color: "#FFC107", legendFontColor: "#fff" },
    ],
    recommendations: [
      { subject: "History", score: 65, topics: ["World War II", "Indian Independence"] },
      { subject: "Science", score: 78, topics: ["Chemical Reactions", "Human Anatomy"] }
    ]
  }

  const handleRevise = async (subject, topics) => {
    setIsLoading(true)
    setCurrentSubject(subject)
    
    // Simulate AI note generation
    setTimeout(() => {
      // Mock AI-generated notes
      const mockNotes = `# ${subject} Revision Notes\n\n## Key Topics to Focus On:\n${topics.map(topic => `- ${topic}`).join('\n')}\n\n## Detailed Explanation:\n\nThis is a sample AI-generated revision note for ${subject}. In a real application, this would be generated by an AI model analyzing your performance and creating personalized study material.\n\n### Key Concepts:\n1. Important concept 1\n2. Important concept 2\n3. Important concept 3\n\n### Practice Questions:\n1. Sample question 1\n2. Sample question 2\n3. Sample question 3\n\n### Additional Resources:\n- Resource 1\n- Resource 2\n- Resource 3`
      
      setAiNotes(mockNotes)
      setIsLoading(false)
      setShowNotes(true)
    }, 2000) // Simulate 2 second delay
  }

  const screenWidth = Dimensions.get('window').width

  return (
    <ScrollView style={styles.container}>
      {/* Header Section */}
      <View style={styles.header}>
        <View style={styles.userInfo}>
          <Text style={styles.userName}>{userData.name}</Text>
          <Text style={styles.userDomain}>{userData.domain}</Text>
        </View>
      </View>

      {/* Exam Attempts Section */}
      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Exam Attempts</Text>
          <TouchableOpacity style={styles.viewAllButton}>
            <Text style={styles.viewAllText}>View All</Text>
            <Ionicons name="chevron-forward" size={20} color="#E50914" />
          </TouchableOpacity>
        </View>

        {examAttempts.map((exam) => (
          <View key={exam.id} style={styles.examCard}>
            <View style={styles.examInfo}>
              <Text style={styles.examName}>{exam.examName}</Text>
              <Text style={styles.examDate}>{exam.date}</Text>
            </View>
            <View style={styles.scoreContainer}>
              <Text style={styles.score}>{exam.score}%</Text>
            </View>
          </View>
        ))}
      </View>

      {/* AI Analysis Section */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>AI Analysis</Text>
        
        {/* Performance Trend Chart */}
        <View style={styles.chartContainer}>
          <Text style={styles.chartTitle}>Performance Trend</Text>
          <LineChart
            data={aiAnalysis.performanceTrend}
            width={screenWidth - 40}
            height={220}
            chartConfig={{
              backgroundColor: '#1a1a1a',
              backgroundGradientFrom: '#1a1a1a',
              backgroundGradientTo: '#1a1a1a',
              decimalPlaces: 0,
              color: (opacity = 1) => `rgba(229, 9, 20, ${opacity})`,
              labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
              style: {
                borderRadius: 16,
              },
              propsForDots: {
                r: "6",
                strokeWidth: "2",
                stroke: "#E50914"
              }
            }}
            bezier
            style={styles.chart}
          />
        </View>

        {/* Subject Breakdown Chart */}
        <View style={styles.chartContainer}>
          <Text style={styles.chartTitle}>Subject Breakdown</Text>
          <PieChart
            data={aiAnalysis.subjectBreakdown}
            width={screenWidth - 40}
            height={220}
            chartConfig={{
              color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
            }}
            accessor="score"
            backgroundColor="transparent"
            paddingLeft="15"
            absolute
          />
        </View>

        {/* Recommendations */}
        <View style={styles.recommendationsContainer}>
          <Text style={styles.recommendationsTitle}>Areas for Improvement</Text>
          {aiAnalysis.recommendations.map((rec, index) => (
            <View key={index} style={styles.recommendationCard}>
              <View style={styles.recommendationHeader}>
                <Text style={styles.recommendationSubject}>{rec.subject}</Text>
                <Text style={styles.recommendationScore}>{rec.score}%</Text>
              </View>
              <Text style={styles.recommendationText}>Focus on: {rec.topics.join(", ")}</Text>
              <TouchableOpacity 
                style={styles.reviseButton}
                onPress={() => handleRevise(rec.subject, rec.topics)}
                disabled={isLoading}
              >
                {isLoading && currentSubject === rec.subject ? (
                  <View style={styles.loadingContainer}>
                    <ActivityIndicator color="#fff" size="small" />
                    <Text style={styles.loadingText}>Generating...</Text>
                  </View>
                ) : (
                  <Text style={styles.reviseButtonText}>Revise Now</Text>
                )}
              </TouchableOpacity>
            </View>
          ))}
        </View>
      </View>

      {/* AI Notes Modal */}
      <Modal
        visible={showNotes}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowNotes(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{currentSubject} Revision Notes</Text>
              <TouchableOpacity 
                style={styles.closeButton}
                onPress={() => setShowNotes(false)}
              >
                <Ionicons name="close" size={24} color="#fff" />
              </TouchableOpacity>
            </View>
            <ScrollView style={styles.notesContent}>
              <Text style={styles.notesText}>{aiNotes}</Text>
            </ScrollView>
          </View>
        </View>
      </Modal>
    </ScrollView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  header: {
    padding: 20,
    backgroundColor: '#121212',
    borderBottomWidth: 1,
    borderBottomColor: '#2a2a2a',
  },
  userInfo: {
    marginTop: 20,
  },
  userName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#fff',
  },
  userDomain: {
    fontSize: 16,
    color: '#8E8E93',
    marginTop: 4,
  },
  section: {
    marginTop: 20,
    padding: 20,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  viewAllButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  viewAllText: {
    color: '#E50914',
    marginRight: 4,
  },
  examCard: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#2a2a2a',
  },
  examInfo: {
    flex: 1,
  },
  examName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#fff',
  },
  examDate: {
    fontSize: 14,
    color: '#8E8E93',
    marginTop: 4,
  },
  scoreContainer: {
    backgroundColor: '#1a1a1a',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#E50914',
  },
  score: {
    fontSize: 16,
    fontWeight: '600',
    color: '#E50914',
  },
  chartContainer: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#2a2a2a',
  },
  chartTitle: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 10,
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
  },
  recommendationsContainer: {
    marginTop: 20,
  },
  recommendationsTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
  },
  recommendationCard: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#2a2a2a',
  },
  recommendationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  recommendationSubject: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  recommendationScore: {
    color: '#E50914',
    fontSize: 16,
    fontWeight: '600',
  },
  recommendationText: {
    color: '#8E8E93',
    fontSize: 14,
    marginBottom: 12,
  },
  reviseButton: {
    backgroundColor: '#E50914',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignSelf: 'flex-start',
  },
  reviseButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  loadingText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    width: '90%',
    maxHeight: '80%',
    borderWidth: 1,
    borderColor: '#2a2a2a',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#2a2a2a',
  },
  modalTitle: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  closeButton: {
    padding: 4,
  },
  notesContent: {
    padding: 16,
  },
  notesText: {
    color: '#fff',
    fontSize: 14,
    lineHeight: 20,
  },
})

export default Progress